{"version":3,"sources":["Components/searchresultcard.js","Components/searchresults.js","Components/favouritescomponent.js","Components/inputform.js","Components/header.js","Components/navbar.js","App.js","reportWebVitals.js","index.js"],"names":["SearchResultCard","props","Card","style","minWidth","Img","width","margin","variant","src","result","artworkUrl100","Body","Title","trackName","artistName","onClick","addOrRemove","handleRemoveFavourite","handleAddFavourite","SearchResults","results","searchResults","map","index","Col","id","Container","Row","xs","md","lg","Favourites","favourites","length","fontSize","marginTop","marginBottom","useStyles","makeStyles","theme","formControl","selectEmpty","spacing","BootstrapInput","withStyles","root","input","borderRadius","backgroundColor","palette","background","paper","border","padding","transition","transitions","create","fontFamily","join","borderColor","boxShadow","InputBase","useStylesInput","InputForm","classes","React","useState","media","setMedia","classesInput","searchText","setSearchText","setSearchResults","setFavourites","FormControl","className","InputLabel","htmlFor","value","onChange","event","target","Select","native","label","inputProps","name","Button","size","color","fetch","method","then","response","json","data","catch","err","console","log","alert","favouriteDetail","favouriteList","indexToRemove","indexOf","splice","Header","NavbarComponent","Navbar","bg","fixed","Brand","href","Nav","Link","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAMe,SAASA,EAAiBC,GACvC,OAEE,cADA,CACCC,EAAA,EAAD,CAAMC,MAAO,CAAEC,SAAU,SAAzB,UACE,cAACF,EAAA,EAAKG,IAAN,CAEEF,MAAO,CAAEG,MAAO,QAASC,OAAQ,QACjCC,QAAQ,MAERC,IAAKR,EAAMS,OAAOC,gBAEpB,eAACT,EAAA,EAAKU,KAAN,WACE,cAACV,EAAA,EAAKW,MAAN,UAAaZ,EAAMS,OAAOI,YAC1B,cAACZ,EAAA,EAAKW,MAAN,UAAaZ,EAAMS,OAAOK,aAC1B,cAAC,IAAD,CACEP,QAAQ,UAERQ,QACwB,2BAAtBf,EAAMgB,YACF,kBAAMhB,EAAMiB,sBAAsBjB,EAAMS,SACxC,kBAAMT,EAAMkB,mBAAmBlB,EAAMS,SAN7C,SAQGT,EAAMgB,oB,8BCvBF,SAASG,EAAcnB,GAEpC,IAAMoB,EAAUpB,EAAMqB,cAAcC,KAAI,SAACb,EAAQc,GAAT,OACtC,cAACC,EAAA,EAAD,UACE,cAACzB,EAAD,CACEU,OAAQA,EAERS,mBAAoBlB,EAAMkB,mBAC1BF,YAAa,qBAFRO,QAOX,OACE,qBAAKE,GAAG,aAAR,SACE,cAACC,EAAA,EAAD,UAGE,cAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAvB,SACGV,QClBI,SAASW,EAAW/B,GAEjC,IAAMoB,EAAUpB,EAAMgC,WAAWV,KAAI,SAACb,EAAQc,GAAT,OACnC,cAACC,EAAA,EAAD,UACE,cAACzB,EAAD,CACEU,OAAQA,EAIRQ,sBAAuBjB,EAAMiB,sBAE7BD,YAAa,0BAJRO,QAUX,OAAgC,IAA5BvB,EAAMgC,WAAWC,OAEjB,sBACER,GAAG,gBACHvB,MAAO,CAAEgC,SAAU,OAAQC,UAAW,OAAQC,aAAc,SAF9D,UAGE,0DACA,0HAQF,sBAAKX,GAAG,gBAAR,UACE,0DACA,cAACC,EAAA,EAAD,UAEE,cAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAvB,SACGV,SC5Bb,IAAMiB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,YAAa,CAEXrC,SAAU,KAEZsC,YAAa,CACXN,UAAWI,EAAMG,QAAQ,QAKvBC,EAAiBC,aAAW,SAACL,GAAD,MAAY,CAC5CM,KAAM,CACJ,YAAa,CACXV,UAAWI,EAAMG,QAAQ,KAG7BI,MAAO,CACLC,aAAc,EAEdC,gBAAiBT,EAAMU,QAAQC,WAAWC,MAC1CC,OAAQ,oBACRlB,SAAU,GACVmB,QAAS,sBACTC,WAAYf,EAAMgB,YAAYC,OAAO,CAAC,eAAgB,eACtDC,WAAY,CACV,SACA,mBACA,QACA,aACA,sBACA,mBACA,qBACAC,KAAK,KACP,UAAW,CACTX,aAAc,EACdY,YAAa,UACbC,UAAW,wCA1BMhB,CA6BnBiB,KAEEC,EAAiBxB,aAAW,SAACC,GAAD,MAAY,CAC5CjC,OAAQ,CACNA,OAAQiC,EAAMG,QAAQ,QAUX,SAASqB,IACtB,IAAMC,EAAU3B,IAGhB,EAA0B4B,IAAMC,SAAS,IAAzC,mBAAOC,EAAP,KAAcC,EAAd,KAOMC,EAAeP,IAErB,EAAoCG,IAAMC,SAAS,IAAnD,mBAAOI,EAAP,KAAmBC,EAAnB,KAQA,EAA0CN,IAAMC,SAAS,IAAzD,mBAAO7C,EAAP,KAAsBmD,EAAtB,KAGA,EAAoCP,IAAMC,SAAS,IAAnD,mBAAOlC,EAAP,KAAmByC,EAAnB,KAiDA,OACE,sBAAKhD,GAAG,YAAR,UAEE,eAACiD,EAAA,EAAD,CAAaC,UAAWN,EAAa/D,OAAQJ,MAAO,CAAEC,SAAU,KAAhE,UACE,cAACyE,EAAA,EAAD,CAAYC,QAAQ,0BAApB,uCAGA,cAAClC,EAAD,CACElB,GAAG,0BAEHqD,MAAOR,EACPS,SApEkB,SAACC,GACzBT,EAAcS,EAAMC,OAAOH,aAsEzB,eAACJ,EAAA,EAAD,CACEnE,QAAQ,WACRoE,UAAWX,EAAQxB,YACnBtC,MAAO,CAAEC,SAAU,IAAK6C,gBAAiB,SAH3C,UAIE,cAAC4B,EAAA,EAAD,CAAYC,QAAQ,6BAApB,wBACA,eAACK,EAAA,EAAD,CACEC,QAAM,EAENL,MAAOX,EAEPY,SA1Fa,SAACC,GACpBZ,EAASY,EAAMC,OAAOH,QA0FhBM,MAAM,aACNC,WAAY,CACVC,KAAM,QACN7D,GAAI,8BATR,UAYE,wBAAQ,aAAW,OAAOqD,MAAM,KAChC,wBAAQA,MAAO,QAAf,mBACA,wBAAQA,MAAO,UAAf,qBACA,wBAAQA,MAAO,QAAf,mBACA,wBAAQA,MAAO,aAAf,yBACA,wBAAQA,MAAO,YAAf,uBACA,wBAAQA,MAAO,YAAf,wBACA,wBAAQA,MAAO,SAAf,qBACA,wBAAQA,MAAO,WAAf,sBACA,wBAAQA,MAAO,QAAf,mBACA,wBAAQA,MAAO,MAAf,uBAGJ,cAACS,EAAA,EAAD,CACEhF,QAAQ,YACRiF,KAAK,QACLC,MAAM,UACNhE,GAAG,eACHkD,UAAWX,EAAQ1D,OAEnBS,QAAS,WApEM,KAAfuD,GAA+B,KAAVH,EAEvBuB,MAAM,aAAD,OAAcpB,EAAd,kBAAkCH,GATtB,CACjBwB,OAAQ,SASLC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAELvB,EAAiBuB,EAAK3E,YAEvB4E,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,MAG9BG,MACE,uEAiDF,oBAYA,cAACjF,EAAD,CACEE,cAAeA,EACfH,mBAxGqB,SAACmF,GAC1B5B,EAAc,GAAD,mBAAKzC,GAAL,CAAiBqE,QA0G5B,cAACtE,EAAD,CACEC,WAAYA,EACZf,sBAxGwB,SAACoF,GAE7B,IAAIC,EAAa,YAAOtE,GAGpBuE,EAAgBD,EAAcE,QAAQH,GAG1CC,EAAcG,OAAOF,EAAe,GAGpC9B,EAAc6B,SC5GH,SAASI,IACtB,OACE,sBAAKjF,GAAG,YAAR,uDAC4C,uBAC1C,uBAFF,+GAGiD,uBAC/C,uBAJF,4FAME,uBACA,uBAPF,mB,0BCEW,SAASkF,IACtB,OAEE,aADA,CACCC,EAAA,EAAD,CAAQC,GAAG,OAAOtG,QAAQ,OAAOuG,MAAM,MAAvC,SACE,eAACpF,EAAA,EAAD,WAEE,cAACkF,EAAA,EAAOG,MAAR,CAAcC,KAAK,aAAnB,wBACA,eAACC,EAAA,EAAD,CAAKtC,UAAU,UAAf,UACE,cAACsC,EAAA,EAAIC,KAAL,CAAUF,KAAK,aAAf,oBAEA,cAACC,EAAA,EAAIC,KAAL,CAAUF,KAAK,cAAf,qBACA,cAACC,EAAA,EAAIC,KAAL,CAAUF,KAAK,iBAAf,gCCFKG,MAVf,WACE,OACE,sBAAKxC,UAAU,MAAf,UACE,cAACgC,EAAD,IACA,cAACD,EAAD,IACA,cAAC3C,EAAD,QCCSqD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5f875434.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\n// using cards from bootstrap to display the results of the search and the favourites\r\n\r\nexport default function SearchResultCard(props) {\r\n  return (\r\n    // min width is important for styling for when it goes to mobile\r\n    <Card style={{ minWidth: \"18rem\" }}>\r\n      <Card.Img\r\n        // image is 100*100 from itunes\r\n        style={{ width: \"100px\", margin: \"auto\" }}\r\n        variant=\"top\"\r\n        // the link to the image from itunes\r\n        src={props.result.artworkUrl100}\r\n      />\r\n      <Card.Body>\r\n        <Card.Title>{props.result.trackName}</Card.Title>\r\n        <Card.Title>{props.result.artistName}</Card.Title>\r\n        <Button\r\n          variant=\"primary\"\r\n          // give it the appropriate handler function depending on if it is a favourite or just a search result\r\n          onClick={\r\n            props.addOrRemove === \"Remove From Favourites\"\r\n              ? () => props.handleRemoveFavourite(props.result)\r\n              : () => props.handleAddFavourite(props.result)\r\n          }>\r\n          {props.addOrRemove}\r\n        </Button>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport SearchResultCard from \"./searchresultcard\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\n// import these from react bootstrap to use bootstraps grid system for responsive styling\r\n\r\nexport default function SearchResults(props) {\r\n  // map through the array of the results\r\n  const results = props.searchResults.map((result, index) => (\r\n    <Col>\r\n      <SearchResultCard\r\n        result={result}\r\n        key={index}\r\n        handleAddFavourite={props.handleAddFavourite}\r\n        addOrRemove={\"Add to Favourites\"}\r\n      />\r\n    </Col>\r\n  ));\r\n\r\n  return (\r\n    <div id=\"resultsDiv\">\r\n      <Container>\r\n        {/* using the bootstrap grid system, on a large screen there will only be 2 per row, medium 2 and xs 1 */}\r\n\r\n        <Row xs={1} md={2} lg={2}>\r\n          {results}\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport SearchResultCard from \"./searchresultcard\";\r\n\r\n// import the container and row and col to use the react grid system for styling\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\n\r\nexport default function Favourites(props) {\r\n  // map through the results array\r\n  const results = props.favourites.map((result, index) => (\r\n    <Col>\r\n      <SearchResultCard\r\n        result={result}\r\n        // using map here so need to give it a key\r\n        key={index}\r\n        // pass the handler to remove the item from favourites\r\n        handleRemoveFavourite={props.handleRemoveFavourite}\r\n        // pass what the button text will say\r\n        addOrRemove={\"Remove From Favourites\"}\r\n      />\r\n    </Col>\r\n  ));\r\n\r\n  //if there are no favourites chosen yet then display this else display the favourites\r\n  if (props.favourites.length === 0) {\r\n    return (\r\n      <div\r\n        id=\"favouritesDiv\"\r\n        style={{ fontSize: \"25px\", marginTop: \"10px\", marginBottom: \"100px\" }}>\r\n        <h2>Your list of Favourites:</h2>\r\n        <div>\r\n          You currently have no favourites, search above and add some items to\r\n          your favourites\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div id=\"favouritesDiv\">\r\n        <h2>Your list of Favourites:</h2>\r\n        <Container>\r\n          {/* using the bootstrap grid system, on a large screen there will only be 2 per row, medium 2 and xs 1 */}\r\n          <Row xs={1} md={2} lg={2}>\r\n            {results}\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport SearchResults from \"./searchresults\";\r\nimport Favourites from \"./favouritescomponent\";\r\n\r\n// I used material ui components for the input box and for the select box\r\n// you can find the components here: https://material-ui.com/components/selects/\r\n\r\n// the built in styles that come with the component\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    // margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\n// built in from material UI\r\nconst BootstrapInput = withStyles((theme) => ({\r\n  root: {\r\n    \"label + &\": {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n  },\r\n  input: {\r\n    borderRadius: 4,\r\n\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"1px solid #ced4da\",\r\n    fontSize: 16,\r\n    padding: \"10px 26px 10px 12px\",\r\n    transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n    fontFamily: [\r\n      \"Roboto\",\r\n      '\"Helvetica Neue\"',\r\n      \"Arial\",\r\n      \"sans-serif\",\r\n      '\"Apple Color Emoji\"',\r\n      '\"Segoe UI Emoji\"',\r\n      '\"Segoe UI Symbol\"',\r\n    ].join(\",\"),\r\n    \"&:focus\": {\r\n      borderRadius: 4,\r\n      borderColor: \"#80bdff\",\r\n      boxShadow: \"0 0 0 0.2rem rgba(0,123,255,.25)\",\r\n    },\r\n  },\r\n}))(InputBase);\r\n\r\nconst useStylesInput = makeStyles((theme) => ({\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\n// I wanted to get more familiar with hooks in a functional component so I used hooks instead of a\r\n// class component with a state and constructor function\r\n\r\n// I read up on the react docs how to use them and why they are useful\r\n// https://reactjs.org/docs/hooks-intro.html\r\n\r\nexport default function InputForm() {\r\n  const classes = useStyles();\r\n\r\n  // initialise a new state variable for the media select\r\n  const [media, setMedia] = React.useState(\"\");\r\n\r\n  // handling the changing of the select component\r\n  const handleChange = (event) => {\r\n    setMedia(event.target.value);\r\n  };\r\n\r\n  const classesInput = useStylesInput();\r\n  // new state variable using useState hook\r\n  const [searchText, setSearchText] = React.useState(\"\");\r\n\r\n  // handle the change of the text in the input box\r\n  const handleChangeInput = (event) => {\r\n    setSearchText(event.target.value);\r\n  };\r\n\r\n  // initialising the results state with hooks, and naming the function that will let us update the state in the future\r\n  const [searchResults, setSearchResults] = React.useState([]);\r\n\r\n  // initialising the state for the favourites\r\n  const [favourites, setFavourites] = React.useState([]);\r\n\r\n  // handling the adding of the favourites, using es6 destructuring for the array to make sure the new favourites array is set correctly\r\n  const handleAddFavourite = (favouriteDetail) => {\r\n    setFavourites([...favourites, favouriteDetail]);\r\n  };\r\n\r\n  // the handler function for removing a favourite\r\n  const handleRemoveFavourite = (favouriteDetail) => {\r\n    // using the es6 destructuring\r\n    let favouriteList = [...favourites];\r\n\r\n    // find the index of the one that has been clicked to remove\r\n    let indexToRemove = favouriteList.indexOf(favouriteDetail);\r\n\r\n    // splice it from the array\r\n    favouriteList.splice(indexToRemove, 1);\r\n\r\n    // set the new state of the favourite to the spliced up array\r\n    setFavourites(favouriteList);\r\n  };\r\n\r\n  // handling the search button\r\n  const handleSubmit = () => {\r\n    // an object that will be passed to the fetch method to show that it is a post request\r\n    const postMethod = {\r\n      method: \"POST\",\r\n    };\r\n\r\n    // before fetching handle if they have not entered anything into the search box and also handle if\r\n    // they have not selected a media type so it works with the backend\r\n\r\n    if (searchText !== \"\" && media !== \"\") {\r\n      // fetch from the backend the data we would like with the search terms\r\n      fetch(`/api?term=${searchText}&media=${media}`, postMethod)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          // using the function to update the state of the results\r\n          setSearchResults(data.results);\r\n        })\r\n        .catch((err) => console.log(err));\r\n    } else {\r\n      // If they have not entered in the search box or selected a media type, alert them\r\n      alert(\r\n        \"Please enter what you would like to search for and what media type\"\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"formInput\">\r\n      {/* giving it a min width for styling */}\r\n      <FormControl className={classesInput.margin} style={{ minWidth: 300 }}>\r\n        <InputLabel htmlFor=\"demo-customized-textbox\">\r\n          What are you looking for?\r\n        </InputLabel>\r\n        <BootstrapInput\r\n          id=\"demo-customized-textbox\"\r\n          // the value of the input passed down from the state variable, no need to use this like in class components\r\n          value={searchText}\r\n          onChange={handleChangeInput}\r\n        />\r\n      </FormControl>\r\n      <FormControl\r\n        variant=\"outlined\"\r\n        className={classes.formControl}\r\n        style={{ minWidth: 300, backgroundColor: \"white\" }}>\r\n        <InputLabel htmlFor=\"outlined-age-native-simple\">Media Type</InputLabel>\r\n        <Select\r\n          native\r\n          // the state of media passed down as value\r\n          value={media}\r\n          // the onchange handler\r\n          onChange={handleChange}\r\n          label=\"Media Type\"\r\n          inputProps={{\r\n            name: \"media\",\r\n            id: \"outlined-age-native-simple\",\r\n          }}>\r\n          {/* the select options below */}\r\n          <option aria-label=\"None\" value=\"\" />\r\n          <option value={\"movie\"}>Movie</option>\r\n          <option value={\"podcast\"}>Podcast</option>\r\n          <option value={\"music\"}>Music</option>\r\n          <option value={\"musicVideo\"}>Music Video</option>\r\n          <option value={\"audiobook\"}>Audiobook</option>\r\n          <option value={\"shortFilm\"}>Short Film</option>\r\n          <option value={\"tvShow\"}>TV Show</option>\r\n          <option value={\"software\"}>Software</option>\r\n          <option value={\"ebook\"}>Ebook</option>\r\n          <option value={\"all\"}>All</option>\r\n        </Select>\r\n      </FormControl>\r\n      <Button\r\n        variant=\"contained\"\r\n        size=\"large\"\r\n        color=\"primary\"\r\n        id=\"searchButton\"\r\n        className={classes.margin}\r\n        // pass the onclick function for handling the submit\r\n        onClick={() => handleSubmit()}>\r\n        Search\r\n      </Button>\r\n      {/* add a results component and a favourites component */}\r\n      {/* pass add favourite handler as the results you can add it to your favourite */}\r\n      <SearchResults\r\n        searchResults={searchResults}\r\n        handleAddFavourite={handleAddFavourite}\r\n      />\r\n      {/* pass the remove from favourites handler to the favourites cards */}\r\n      <Favourites\r\n        favourites={favourites}\r\n        handleRemoveFavourite={handleRemoveFavourite}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n// simple header div with some information\r\n\r\nexport default function Header() {\r\n  return (\r\n    <div id=\"headerDiv\">\r\n      Welcome to your personal favourites list. <br></br>\r\n      <br></br>Here you can use the iTunes API to search for your favourite\r\n      songs, movies, books and other forms of media. <br></br>\r\n      <br></br> Once you have found what you are looking for you can add them to\r\n      your list of favourites\r\n      <br></br>\r\n      <br></br>\r\n      Search Below:\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\n\r\n// Using the dark navbar out of the box from react bootstrap\r\n\r\nexport default function NavbarComponent() {\r\n  return (\r\n    //   bg background and variant = \"dark\" for styling, fixed = \"top\" so that the navbar is fixed to the top\r\n    <Navbar bg=\"dark\" variant=\"dark\" fixed=\"top\">\r\n      <Container>\r\n        {/* give the links the appropriate href attribute  */}\r\n        <Navbar.Brand href=\"#headerDiv\">iTunes API</Navbar.Brand>\r\n        <Nav className=\"me-auto\">\r\n          <Nav.Link href=\"#headerDiv\">Search</Nav.Link>\r\n\r\n          <Nav.Link href=\"#resultsDiv\">Results</Nav.Link>\r\n          <Nav.Link href=\"#favouritesDiv\">Favourites</Nav.Link>\r\n        </Nav>\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport InputForm from \"./Components/inputform\";\nimport Header from \"./Components/header\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport NavbarComponent from \"./Components/navbar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavbarComponent />\n      <Header />\n      <InputForm />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}